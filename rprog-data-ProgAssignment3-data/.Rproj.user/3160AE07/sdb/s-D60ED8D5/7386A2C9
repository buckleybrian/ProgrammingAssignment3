{
    "contents" : "# Create a list\nj = list(name='Joe',salary=55000,union=T)\nj\n\n# Access the list\nj$salary\nj[['salary']]\nj[[2]]\n\n# Not using square brackes\nj['salary']\nj[2]\nj[1:2]\n\n# Add a new component\nj$sales = c(10400,12300,13700)\nj[[5]] = 'Manager'\n\n# Delete it\nj[[5]] = NULL\n\n# length\nlength(j)\nlength(j$sales)\n\n# Find names or structure\nnames(j)\nstr(j)\n\n# Turn into a vector\nunlist(j)\nmode(unlist(j))\nunname(unlist(j))\nunlist(j,use.names=FALSE)\n\n# Use lapply on list\nlapply(list(1:3,25:29),median)\n\n# And sapply\nsapply(list(1:3,25:29),median)\n\n# A list within a list\nlist(a=1,b=2,c=list(d=3,e=4))\n\n# A matrix in a list\nlist(a=1,b=matrix(c(1,2,3,4),ncol=2,nrow=2))\n\n##########################\n\n# Extended example - text concordance\n\nfirstpar = 'It was a bright cold day in April and the clocks were striking thirteen Winston Smith his chin nuzzled into his breast in an effort to escape the vile wind slipped quickly through the glass doors of Victory Mansions though not quickly enough to prevent a swirl of gritty dust from entering along with him'\n\nfindwords = function(tf) {\n  # Read in the words from the text and separate into a vector\n  txt = unlist(strsplit(tf,' '))\n  # Create a list to store the words and their positions\n  wl = list()\n  # Loop through each word\n  for(i in 1:length(txt)) {\n    # Get the current word\n    wrd = txt[i]\n    # Add its position to the list with the appropriate tag\n    wl[[wrd]] = c(wl[[wrd]],i)\n  }\n  # Return the answer as a list\n  return(wl)\n}\nfindwords(firstpar)\n\n# Simple sort alphabetically function\nalphawl = function(wrdlst) {\n  nms = names(wrdlst) # Find the tags of the list\n  sn = sort(nms) # Sort them alphabetically\n  return(wrdlst[sn]) # Return them  \n}\nalphawl(findwords(firstpar))\n\n# or sort by frequency\nfreqwl = function(wrdlst) {\n  freqs = sapply(wrdlst,length) # Find the length of each word\n  return(wrdlst[order(freqs)]) # Return them in order\n}\nfreqwl(findwords(firstpar))\n\n##########################\n\n# Data Frames\n\n# Simple example\nkids = c('Jack','Jill')\nages = c(12,10)\nd = data.frame(kids,ages)\nd\nmode(d)\n\n# Access it\nd[[2]]\nd$kids[1]\n\nstr(d)\n\n# Load in the data frame women containing height (inches) and weight (lbs) of 15 women\nstr(women)\n\n# Extract parts of it\nwomen[1:3,]\nwomen[women$height>70,]\nsubset(women,weight<130)\n\n# Look at complete.cases\nwomen[1,1] = women[13,2] = NA\nwomen\nwomen[complete.cases(women),]\n\n# Add in extra columns\ndata(women) # Reload the data in again to get rid of the NA values created above\nwomen2 = cbind(women,letters[1:15])\nwomen3 = rbind(women,c(73,166))\nwomen4 = cbind(women,women$height*2.54,women$weight*0.45)\nnames(women4) = c('heightin','weightin','heightcm','weightkg')\nwomen$heightcm = women$height*2.54\n\n# Merging data frames\nd1 = data.frame(kids=c('Jack','Jill','Jillian','John'),county=c('Dublin','Cork','Donegal','Kerry'))\nd2 = data.frame(ages=c(10,7,12),kids=c('Jill','Lillian','Jack'))\nmerge(d1,d2)\n\n# Matching with different variable names\nd3 = data.frame(age=c(10,7,12),names=c('Jill','Lillian','Jack'))\nmerge(d1,d3,by.x='kids',by.y='names')\n\n# Be careful matching with duplicates\nd4 = rbind(d2,list(15,'Jill')) # d4 now contains two Jills\nmerge(d1,d4)\n# The merge now thinks both Jills come from Cork\n\n# Using lapply on a data frame\nlapply(d,'sort')\ndata.frame(lapply(d,'sort'))\n\n##########################\n\n# Extended example - birthwt data with logistic regression\nlibrary(MASS)\nhelp(birthwt)\nstr(birthwt)\n\n# Drop 2 of the columns\nbirthwt2 = birthwt[,-c(4,10)]\n\n# Write a function\nlogfun = function(x) {\n  glm(birthwt2$low ~ x, family=binomial)$coef\n}\nsapply(birthwt2[,-1],logfun)\n\n# Plot of low birthwt against age\nmod = glm(birthwt2$low ~ birthwt2$age, family=binomial)$coef\nplot(jitter(birthwt2$age),birthwt2$low, col=\"red\")\npoints(birthwt2$age,1/(1+exp(-(mod[1]+mod[2]*birthwt2$age))),pch=2, col=\"green\")\n",
    "created" : 1412059008260.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1619093485",
    "id" : "7386A2C9",
    "lastKnownWriteTime" : 1411927951,
    "path" : "~/Personal/Courses/UCD Data Analytics/STAT40730 Data Prog with R/Lecture3code(1).R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}